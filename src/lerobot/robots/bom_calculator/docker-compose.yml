version: '3.8'

services:
  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: ../Dockerfile.backend
    container_name: bom-calculator-backend
    restart: unless-stopped
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    environment:
      - DATABASE_URL=${DATABASE_URL:-sqlite+aiosqlite:///./data/bom_calculator.db}
      - CORS_ORIGINS=${CORS_ORIGINS:-["http://localhost:3000","http://localhost:80"]}
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-in-production}
      - DEBUG=${DEBUG:-false}
      - APP_NAME=${APP_NAME:-BOM Calculator}
      - APP_VERSION=${APP_VERSION:-1.0.0}
    volumes:
      - ./backend/data:/app/data
      - ./logs/backend:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - bom-network
    depends_on:
      - db-init

  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: ../Dockerfile.frontend
      args:
        - VITE_API_URL=${VITE_API_URL:-http://localhost:8000}
    container_name: bom-calculator-frontend
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
    volumes:
      - ./logs/frontend:/var/log/nginx
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    networks:
      - bom-network
    depends_on:
      - backend

  # Database Initialization Service (runs once)
  db-init:
    build:
      context: ./backend
      dockerfile: ../Dockerfile.backend
    container_name: bom-calculator-db-init
    command: python -m init_db
    environment:
      - DATABASE_URL=${DATABASE_URL:-sqlite+aiosqlite:///./data/bom_calculator.db}
    volumes:
      - ./backend/data:/app/data
    networks:
      - bom-network
    restart: "no"

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: bom-calculator-nginx
    restart: unless-stopped
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - bom-network
    depends_on:
      - backend
      - frontend
    profiles:
      - production

  # Redis Cache (Optional, for production)
  redis:
    image: redis:alpine
    container_name: bom-calculator-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - bom-network
    profiles:
      - production

  # PostgreSQL Database (Optional, for production)
  postgres:
    image: postgres:15-alpine
    container_name: bom-calculator-postgres
    restart: unless-stopped
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-bom_calculator}
      - POSTGRES_USER=${POSTGRES_USER:-bom_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-secure_password}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./backend/sql:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-bom_user}"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - bom-network
    profiles:
      - production

  # Monitoring - Prometheus (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: bom-calculator-prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - bom-network
    profiles:
      - monitoring

  # Monitoring - Grafana (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: bom-calculator-grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning:ro
    networks:
      - bom-network
    depends_on:
      - prometheus
    profiles:
      - monitoring

networks:
  bom-network:
    driver: bridge
    name: bom-calculator-network

volumes:
  postgres-data:
    name: bom-calculator-postgres-data
  redis-data:
    name: bom-calculator-redis-data
  prometheus-data:
    name: bom-calculator-prometheus-data
  grafana-data:
    name: bom-calculator-grafana-data